
# Enable Expires headers
# ... keep existing code (Expires module)
<IfModule mod_expires.c>
  ExpiresActive On
  ExpiresDefault "access plus 1 month"
  ExpiresByType text/css "access plus 1 year"
  ExpiresByType text/javascript "access plus 1 year"
  ExpiresByType application/javascript "access plus 1 year"
  ExpiresByType image/jpg "access plus 1 year"
  ExpiresByType image/jpeg "access plus 1 year"
  ExpiresByType image/gif "access plus 1 year"
  ExpiresByType image/png "access plus 1 year"
  ExpiresByType image/svg+xml "access plus 1 year"
  ExpiresByType image/webp "access plus 1 year"
  ExpiresByType image/avif "access plus 1 year"
  ExpiresByType image/x-icon "access plus 1 year"
  ExpiresByType video/mp4 "access plus 1 year"
  ExpiresByType video/webm "access plus 1 year"
  ExpiresByType audio/mp3 "access plus 1 year"
  ExpiresByType audio/ogg "access plus 1 year"
  ExpiresByType font/ttf "access plus 1 year"
  ExpiresByType font/otf "access plus 1 year"
  ExpiresByType font/woff "access plus 1 year"
  ExpiresByType font/woff2 "access plus 1 year"
  ExpiresByType application/font-woff "access plus 1 year"
  ExpiresByType application/font-woff2 "access plus 1 year"
  ExpiresByType application/json "access plus 1 day"
  ExpiresByType application/xml "access plus 1 day"
  ExpiresByType text/xml "access plus 1 day"
  ExpiresByType text/html "access plus 2 hours"
</IfModule>

# Add CORS headers for fonts
# ... keep existing code (CORS and Cache-Control headers)
<IfModule mod_headers.c>
  <FilesMatch "\.(ttf|ttc|otf|eot|woff|woff2|font.css)$">
    Header set Access-Control-Allow-Origin "*"
  </FilesMatch>
  <FilesMatch "\.(css|js)$">
    Header set Cache-Control "public, max-age=31536000"
  </FilesMatch>
  <FilesMatch "\.(jpg|jpeg|png|gif|svg|webp|avif|ico)$">
    Header set Cache-Control "public, max-age=31536000"
  </FilesMatch>
  <FilesMatch "\.(ttf|ttc|otf|eot|woff|woff2)$">
    Header set Cache-Control "public, max-age=31536000"
  </FilesMatch>
</IfModule>

# Disable ETags
# ... keep existing code (ETags)
<IfModule mod_headers.c>
  Header unset ETag
</IfModule>
FileETag None

# Enable compression
# ... keep existing code (Compression)
<IfModule mod_deflate.c>
  AddOutputFilterByType DEFLATE text/plain
  AddOutputFilterByType DEFLATE text/html
  AddOutputFilterByType DEFLATE text/xml
  AddOutputFilterByType DEFLATE text/css
  AddOutputFilterByType DEFLATE text/javascript
  AddOutputFilterByType DEFLATE application/xml
  AddOutputFilterByType DEFLATE application/xhtml+xml
  AddOutputFilterByType DEFLATE application/rss+xml
  AddOutputFilterByType DEFLATE application/javascript
  AddOutputFilterByType DEFLATE application/x-javascript
  AddOutputFilterByType DEFLATE application/json
  AddOutputFilterByType DEFLATE font/ttf
  AddOutputFilterByType DEFLATE font/otf
  AddOutputFilterByType DEFLATE font/woff
  AddOutputFilterByType DEFLATE image/svg+xml
</IfModule>

<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteBase /

  # Redirect old language paths to new prefixed structure (assuming 'ca' as default for these old structures)
  # The React app will handle redirect from / to /ca/ internally
  RewriteCond %{HTTP_HOST} ^(www\.)?looptica\.com$ [NC]
  RewriteRule ^cat/?(.*)$ /ca/$1 [R=301,L,NE]
  
  RewriteCond %{HTTP_HOST} ^(www\.)?looptica\.com$ [NC]
  RewriteRule ^en/?(.*)$ /en/$1 [R=301,L,NE]

  # Redirect for specific query param rule - this may conflict or be handled by client-side RedirectHandler
  # Consider removing if client-side handles it, or ensure it aligns.
  # RewriteCond %{HTTP_HOST} ^(www\.)?looptica\.com$ [NC]
  # RewriteCond %{QUERY_STRING} ^noredirect=ca-ES$
  # RewriteRule ^cat/?$ /ca/ [R=301,L,NE,QSD] # QSD to discard query string

  # Legacy URL Redirects to new language-prefixed structure
  # Contact lenses
  RewriteCond %{HTTP_HOST} ^(www\.)?looptica\.com$ [NC]
  RewriteRule ^en/contact-lenses-poblenou-barcelona/?$ /en/services/lents-contacte [R=301,L,NE]
  RewriteCond %{HTTP_HOST} ^(www\.)?looptica\.com$ [NC]
  RewriteRule ^lentillas-poblenou-barcelona/?$ /es/services/lents-contacte [R=301,L,NE]
  
  # Orto-K
  RewriteCond %{HTTP_HOST} ^(www\.)?looptica\.com$ [NC]
  RewriteRule ^orto-k-poblenou-barcelona/?$ /es/services/orto-k [R=301,L,NE]
  RewriteCond %{HTTP_HOST} ^(www\.)?looptica\.com$ [NC]
  RewriteRule ^en/orto-k-in-poblenou-barcelona/?$ /en/services/orto-k [R=301,L,NE]
  
  # Salud visual
  RewriteCond %{HTTP_HOST} ^(www\.)?looptica\.com$ [NC]
  RewriteRule ^salud-visual-poblenou-barcelona/?$ /es/services/salut-visual [R=301,L,NE]

  # Handle SPA routing:
  # If the request is not for an existing file or directory
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  # And the request URI does not start with a language code (en, es, ca) or is just a language code
  # OR if it starts with a language code and is followed by something (actual SPA route)
  # This rule needs to ensure that /en/, /es/, /ca/ followed by SPA routes are handled by index.html
  # While /api or other non-SPA paths are not.
  # The existing rule ^ index.html [QSA,L] should correctly serve index.html for all SPA paths,
  # including language-prefixed ones, as React Router will take over.
  
  # Rule to redirect non-language-prefixed paths to default language (e.g. /about -> /ca/about)
  # This should come before the main SPA rule.
  # Exclude known asset paths or other specific paths that shouldn't be redirected.
  RewriteCond %{REQUEST_URI} !^/(en|es|ca)/ [NC]
  RewriteCond %{REQUEST_URI} !^/(images|assets|lovable-uploads|favicon\.ico|robots\.txt|sitemap\.xml) [NC] # Add other static asset folders
  RewriteCond %{REQUEST_FILENAME} !-f # Make sure it's not an existing file
  RewriteCond %{REQUEST_FILENAME} !-d # Make sure it's not an existing directory
  RewriteCond %{REQUEST_URI} !^/$ # Exclude the root, as App.tsx handles redirection to /ca
  RewriteRule ^(.*)$ /ca/$1 [R=301,L,NE]


  # Main SPA Fallback (should be last among path-altering rules)
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule ^ index.html [QSA,L]
</IfModule>
